bp at $2A8
let's find out how we copy tiles to memory
first hit with DE=$4020, HL=$B333
$B332 is mapped from $13332 in rom
a = 0x07 (confirmed from $B332)
this slowly starts writing out every 4th byte in vram
sometimes it moves hl forwards, sometimes it doesn't
it's basically run length encoding
so for example

07 00 81 01 07 00 81 FF 08 01 9C 29 C7 4F 57 E7 03 03 01 FE FF FF EF E3 E0 C0 80 7F EE D5
00013350  C9 E5 FA 61 1E A7 6F B7 BF 03 7F 89 BF D7 D7 BB E3 BA CD FD B6 08 00 84 ...a..o.................
00013368  0C 03 0F 3F 03 7F A1 1E 7E FE FD FD EA D5 98 1F A5 5A 8D 7F 1F 9F 7F FF ...?....~........Z......
00013380  07 18 23 4F 5C 98 B8 B0 E0 18 04 02 02 01 0D 1D 08 FF 81 80 02 B0 02 43 ..#O\..................C
00013398  8E 21 18 07 1D 39 F9 F2 E2 84 18 E0 00 F0 FC 02 FE 03 FF 04 00 81 F0 03 .!...9..................
000133B0  F8 05 FF 83 FE 70 00 03 FC 81 78 04 00 02 FF 8C DF FF FD FF DF FF F7 D6 .....p....x.............
000133C8  F5 F5 7B 9B 03 EB 02 F7 86 D7 E7 E8 E7 EF 01 0D 00 83 01 12 69 07 FF 82 ..{.................i...
000133E0  00 FC 03 C2 84 FC C0 C0 00 06 C2 8A 7C 00 7C C0 C0 7C 06 06 FC 00 03 C2 ............|.|..|......
000133F8  81 FE 03 C2 09 00 89 7E C0 C0 7C 06 06 FC 00 FF 06 18 9A 00 38 64 64 7C .......~..|.........8dd|
00013410  FE C2 C2 00 FC C6 C6 FC CC C6 C6 00 FC C2 C2 FC C2 C2 FC 00 7C 05 C2 91 ....................|...
00013428  7C 00 C2 E2 F2 DA CE C6 C2 3C 42 9D A1 A1 9D 42 3C 21 00 82 0C 1C 04 0C |........<B....B<!......
00013440  83 1E 00 7C 03 C6 8F 7E 06 06 00 7C C2 C2 7C C2 C2 7C 00 7C C0 FC 03 C6 ...|...~...|..|..|.|....
00013458  81 7C 02 FF 02 7F 84 3F 1F 07 00 0D FF 83 EF C7 01 1C 00 8C 03 0C 30 C0 .|.....?..............0.
00013470  00 00 0E 70 83 0C 30 C0 08 00 86 01 06 08 30 40 80 0B 00 87 03 07 0F 0F ...p..0.......0@........
00013488  1F 7F FF 04 00 83 03 1F 7F 21 FF 82 0F 10 02 20 02 40 02 80 82 F8 0E 02 .........!..... .@......
000134A0  07 03 03 81 01 03 00 02 80 03 C0 83 00 03 1C 05 10 82 1F E0 04 00 93 03 ........................

7x write 00 (every 4th byte)
1x write 01
7x write 00
1x write FF
8x write 01
28x write the next characters (the 0x9C = 0x80 for high bit + 0x1C = 28)
 - 29 C7 4F 57 E7 03 03 01 FE FF FF EF E3 E0 C0 80 7F EE D5 C9 E5 FA 61 1E A7 6F B7 BF 
3x write 7F
9x write next characters
 - BF D7 D7 BB E3 BA CD FD B6
 [all matches up with reading vram so far]
i guess let's bp on $29F and see where hl got to
hl ends at 0xBEDB = 13EDB in file
0xBA9 = 2985 bytes
let's build our own unpacker?
start = 78642
length = 2985

unpacker working

bp at $7ec gets us just after all tiles and palettes and screen has been loaded

so ran some breakpoints, looks like _LABEL_76D_94 just loads the first screen
so this means that the stuff that loads the rest of the things is buried somewhere else?
we're a bit lucky in that RST $30 seems to be used so far for loading the palette so we can probably bp that in future
but we do also have enough data here to rebuild the start screen
rst $30 gets hit every few seconds, i guess it's related to the music too?
it doesn't get hit when doing the map screen
does get hit just as the new palette turns up for the first level
sp = EC 02 11 11 E6 0A (return address should be 0x1111 but might be 0xAE6)
definitely changed palette here
and returned us to 0x1111
called by AE6
none of that chunk got disassembled... 
ok before AE6 was 0062... and nothing before that... did we get chucked here by an interrupt?
looks like AC3 might be the function as debugger doesn't want to drop us in any earlier than that

having some issues getting full disasm, so looking into memory pages
it looks like alex just has first 2 banks both pointing at rom bank 0
but third changes a lot - mostly on 2, sometimes gets moved to 4 or 5 :/ weird
good news is memory model looks roughly like 0-4000 is static, 4000-8000 probably won't change (/shrug), and 8000-c000 = often changes, multiple times per frame
so code should be reliable, data less so... although there is useful code at 4000+ ?!

what do we do here? should we aim to get the main screen loaded? that would be a good start, and then we can look at the level loading after that
i'd be happy calling _LABEL_76D_94 the loading screen loop (at least after we pass the jp   nz, _LABEL_7EC_95)

put a bp there, doesn't get called after game loads so im happy with $76D = start screen
when bp gets hit, return address is $62
instruction at $60 (or $61, idk) is rst $20 which is a jmp based on hl
is it safe to say that $20, possibly even back at $53, is the level/screen loader?
let's bp on $53
$53 is only hit for start screen, but bp on $20 might be more useful
$20 gets hit tons even in the loading screen
sometimes goes to 76D (hl=3b)
sometimes gets called with hl=127, a=0, and sends us to 842
let's check that out then
also massive stacktrace here - 107, 254, C300, C6C0, 76D?!
looks like we got called by the interrupt handler going to _LABEL_1B_39
so pattern is follows
start screen/always
- rst $20 with hl=3b, a=0
- rst $20 with hl=127, a=0

loading map
- above two and
- sometimes rst $20 with hl=2890, a=62 (this jumps to 39DB)
- sometimes rst $20 with hl=127, a=3 (this jumps to 1A01)
- sometimes rst $20 with hl=3b, a=3 (this jumps to 194F)

in level it's the same shit with different numbers

so it's pretty clear - $20 is a central part of the message pump
$1b is also important for some reason - the high bit of a ends up being a flag and then getting zeroed out - rle?

now we know this let's go through start again
stack setup then game on at $85
$85 does the following:
- initialise mem bank 2 to cartridge bank 2
- set all 4 sound channels to off
- clears all RAM
- does some big expensive loop thing with no side effects?! ($343)
- does some sort of console localisation/version check on the magic $DE/$DF ports, stores result in $C005
- initialises VDP registers and zeroes VRAM (stores state of VDP register 1 in $C004)
- finally enables interrupts and display (checking against $C004)

vars so far
C000-C003 = a 32 bit number?
C004 = VDP register 1 (cached for easy enable/disable)
C005 = some localisation stuff (0 for us)
C006 = joypad sync (the demos in start screen actually use this)
C007 = flickers when character changes direction
C008 = used by $2E6 to wake up from sleep, also used to decide what to do in interrupt handler (maybe it's set with options then wait for int?)
C009 = alternates when alex walks, 0B/0C, and goes briefly to 0D when punching
C01F = used as part of rst $20 to decide part of your long jump, also referenced in interrupt handler? maybe pointer to some state object?
C020-C023 = another 32 bit number? looks to be the number of the preview that is playing at the start screen
C07C = changed when i punched a question mark box and got the ring
C0F8 = how many alex sprites (often 0x20 or less)
C0F9 = location of alex sprites in memory
C0AB-C0B0 = hscroll
C0B9-C0C6 = vscroll
C0AF = scroll counter?
C0AB = scroll counter?
C0B9 = scroll counter?
C0BD = scroll counter?
C100 = constantly ticking while game is running but just low nybble
C10D = constantly incremnting while game is running
C111-C1F5 = something that gets reset at $9DF3 - some locally stored tile data?
C11B-C182 = all seems to change with the music
C226 = gets set to 3C as part of start screen init (timer between loading stuff?)
C227 = pointer to which blob to load next on start screen (of the different pictures of alex swimming etc)
C300 = local cache of sprites too (alex/janken etc)
C700-C7FF = local cache of sprite table ($1F7 syncs this to VRAM)
C800-C899? = some other stuff that gets populated in $951 - references to sprite tiles maybe?

easy so far, just initalising everything, and then display and interrupts enabled for when we hit $53

$57 is the loading screen loop, but $53 zeroes out $C01F first... this is where we get our a for when we jump to $20
at least we know $57 is actually the start of everything, and by extension, $76D
var C01F is quite interesting - when it's 00 or 80 we get sent to 76D, but when it's 80 we do the short circuit
looks like we set it to 02 but only the non-disassembled code makes other changes :/

i think the hard part is going to be mapping out all the stuff that can go via $20, but it's a bit of a blessing too
- we have some sort of event loop here and pull a variety of methods out that should serve similar purposes

but first things first - let's port the alex kidd loading screen!

first time to 76D: vram empty, (h1) is 0 so carry on through
once we get to $784 sprite info table populated: 64xE0, 64x00, 64xE0, 64x00
i think this is done in the interrupt handler though - we enable interrupts and sleep
looks like $212 is the culprit here
stack trace goes $EA (inside interrput handler)
looks like is $E7
ok so $1F7 does a bunch of stuff
we have 512 tiles/sprites - we copy from C700-C73F to VRAM 3800-383F, then from C780-C7FF to 3880-38FF
basically we copy the first quarter and second half of C700, and the last quarter happens to be blank (hence the alternating chunks of E0/00)
it feels more and more like $C008 is an interrupt call - hit it and it'll call your interrupt, and sleep/busywait until it returns (locks etc)
anyway we're losing focus

found out what the E0 is - it's 224 (past the end of the screen). the E0/00 thing sets all sprites to sprite #00 and position 224,224 (off end of screen)

i used dumpdata.rb to get the initial tile data out of the rom (13332 in file) into sprites_13332.dat
i then used unpack_tilemap.rb to unpack this in start_screen_tiles.dat
let's find how the rest of vram gets populate and then we can build a start screen.

if we bp on $7c2 we see the base tiles are all loaded in vram
we just need to pull apart $193 and then we can load the tilemap
protip: palette isn't loaded yet, so just dump 00-0F into palette ram and you at least get a (false colour) version of the screen and tiles
huh,  turns out the screen is done in two subtly overlapping bits, and the crazy thing is they don't overlap in ram
so we get a repeat from 12E36-12E45 again at 12E46-12E55 - they could have easily just started 16 bytes earlier with this code
palette is 0x20 bytes at 0x08C6
let's extract this anyway
extract 12D9E=77214 06x1C = 168 bytes
extract 12E46=77382 07x1A = 182 bytes
extract 08C6=2246 0x20 = 32 bytes

this is enough for now - time to build the app that displays this

trying to install emscripten so will look more in the meantime

everything we're finding so far seems to be setup, and then $7EC seems to be the bit that always gets called
$7EC sets a to 0x09 and jumps to the "wait for interrupt" bit, meaning $842 gets hit
$842 seems to get hit multiple times per second and looks like it's driving the whole thing, so worth a closer look here
breaking on $20 tells us
- we flit between a=0, hl=3b/127 (jumping to 76D and 842)
- when we're loading tiles (occasionally) we have a=18 and hl=2890, this gets address from $28C0
- this jumps us to $966 (just returns?!)
- this call happens in the _LABEL_2694_121 handler
- maybe this is a red herring... would be better off bping vram

i put a bp on $397C in VRAM - just to the right of ALEX
looks like sprites get updated by OUTI at $198
we have rom bank 4 in
hl=af8c (12F8C on rom)
obviously this is making use of $193 for printing blocks

stack is 218 (should just be bc), actual return is $87E
just my luck - this never got disassembled
hard to reverse from here, all of this is long jumps via rst $20
btw windows z80dasm is pretty good for disassembling snippets
doing about 80 breaks on $20 gives us a hit with hl=8E6, a=0
this is good; of the 872 to 8F5 block, only 872-8C5 is code, the rest is data
#1: at 8E6 we get a pointer to 872 - this is what we were expecting
#2: we know what called us - SP is pointing at 107
this is kind of weird though - a is 0 (expected) but hl is 8E6
if we are returning to 107 then we got called by $104 which does the call (via $20) to 842
so there must be something near the end of 842 that does a RST $20 call
so that's _LABEL_866_41 - 842 polls on $C226 as a timer (resets to 0x20=32 when it goes through)
then it checks $C227 - if it's less than 6 then go to $866
the nice thing is that our a is our offset to 8E6
pointers are $872, $881, $890, $89C, $8AB, $8BA - 6 different states (0-5)
while we're here, it looks like rom bank 4 is common for storing a lot of our tiles/tilemaps
also let's break on $866 for giggles
first time - a=0
second time - a=1
actually this is trivial - hl is still pointing at C227 and we increment it every time
the nice thing is that the other counter gates 846 - it doesn't do any music, it just loads tilemaps
... oh and when C227 hits 6 then it starts a demo - i think C228 might be the demo counter
nope, it's the flashing alex kidd one - C228 is how many ticks we've done of flashing
it does 0x48 ticks of flashes and then goes onto demo
C220 seems to increment rapidly, C222 is overflow from when C220 hits 0x12
rather, C220 goes from 0x12 to 0x00 and when it hits 0x11 it increments C222
C200 and C201 seem to alternate as alex's underwater feet move

ok so we've got the logo working on the start screen, let's next look at how to put the other stuff on screen
go from $842
bp $847 to catch when they get loaded

got all this stuff loaded, let's look at the sprite loading
first sprite (alex in the water) is set up by the jump to $9C2 and data is stored at $C300
$8F6 is the part where they get copied across to VRAM
we do ($C0F8) = 0x1E and ($C0F9) = $C300 so this is a big clue
then call $9D9 - this initialises b and hl to the same values?! then loops through _LABEL_278D_115
this just seems to initialise all the sprite data - all 0x1E of them, each 0x20 bytes by the looks, must be called beforehand
we should probably pull apart _LABEL_8F6_113 so we can actually load the tiles for our sprites
[side note - this feels like a distraction from reversing the game itself, but it's also teaching me a lot about how the game stages data]
ok so the loader at _LABEL_41C0_117 looks legit
i was scanning the rom and found similar data at $10D46 that lines up with what we dump in, but it might be a red herring?
anyway we load from $8000 in Z80 from bank 4 = $10000 in ROM, so $10D46 makes sense...ish
layout at $8000 looks split - looks like a bunch of pointers here ($8060, $806B, $8078, $8085 etc), code supports some sort of lookup
then looking at $8060 ($10060 ROM) we get 05 41 83 59 83 71 83 89 83 A1 83
at $806B we get 06 41 83 59 83 B9 83 D1 83 E9 83 01 84
at $8078 we get 06 41 83 59 83 19 84 31 84 49 84 61 84
first is 11 bytes but the next few are 13 bytes - first number is length, then that many words words (5, 8341, 8359, 8371, 8389, 83A1)
there's a bit where every 4th byte is the same - this means we can have sprite rows that only use half the palette and take 3 bytes (instead of 4) to encode
actually i think all 4th bytes are the same, just a reduced sprite palette?
let's cheat a little
first call to $41C8 (via $41C0 which initialises stuff) loads the first 11 sprites - the helicopter sprites for some reason?
second call loads next 11 sprites (alex pedalling?)
third call loads a few more with alex running
the calls make more sense now from $8F6
first load sprite set from $8000 + 3A = $8201
we can see the first tile comes from 9079 but this is from a different set of pointers starting at $8200?!
 - srsly grep 79 90 in the rom, only shows up in 3 places
ok this makes a little more sense
$8201 has 0B 79 90 91 90 A9 90 C1 90 D9 90 F1 90 09 91 21 91 39 91 51 91 69 91
0B = 11, 11 pointers follow
first tile at $9079
second tile at $9091
etc
each tile is fixed length (24 bytes that expand out to 32)
so we do this 4 times and end up at $91B
so far we have a bunch of alex sprites loaded... good start
looks like the first 32 tiles are alex, the janken ones are just RLE stashed at $A357 (0x12357 in file) from VRAM $2400 onwards
btw looks like we hit $41C8 a *lot* - this seems to be the base of animations (just overriding the sprites)
we should look a little closer at _LABEL_951_119 - it doesn't load any more sprites, maybe this is the positioning?
... but we have the positioning data so it must be something else - assume music for now?
also what does the sprite plotting once they're loaded?

cheated and did a bp on C300 - gets picked up by _LABEL_2694_121
return is to 7F4 - i guess we know what this method does now
_LABEL_2694_121 gets the data from $C0F9 and $C0F8
$C0F9 is the base of where the sprites are stored ($C300 for us)
$C0F8 is 0x1E for us, and lines up with how many alex sprites
so this code is just for syncing alex sprites at first guess

righty ho then
$2890 is the offset table
on the load screen, each of the 32-byte chunks have the first byte as 0x18
this means we go via rst $20 to hl=2890, a=0x18
which sends us to method at 0x28C0 (resolves to $966)
which should be a plot sprite function with ix pointing at this 32 byte struct
... or just return ($966 is a ret, before some code that never got disassembled)
im gonna guess that's some animation handling code or some weird shit
anyway we can continue here, turns out hl=2890, a=0x18 does sweet nothing
a isn't zero so we still step into the big 3 after we return
keep an eye on accesses to ix
remember each sprite sets  and ix+0e which are probably words for x/y coords
huh, ix+07 is references to that c800 block, so probably useful tileset/mask data
if i grep the disasm i find tons of ix+0c references up in the 2000's in stuff i manually disasm'd
ok so turns out it happens in _LABEL_2706_133 but this disassembler is wildly inconsistent (using decimal instead of hex here)
ix+14 ref at _LABEL_273A_128
also the call stack returns us to _LABEL_26BF_123, which means _LABEL_26D7_131 is the function that plots our sprites!
let's have a look at that tomorrow and see what logic it's using there, looks quite convoluted (fun!)
for future reference, the renderer $26FB seems to set C313 (ix+0x13) for some reason
also ix+5 gets set?!
i think _LABEL_26D7_131 is some post-processing, and the actual loading to screen is done elsewhere
this does look to confirm that the C700 -> VRAM 3F00 caching is taking place (all handled in $1F7)
so what sets C700? or rather, C706 seems to be the important one
ok it's starting to make sense now
$26D7 has some sort of stack it goes through
and puts things out from wherever into C700
terminated with 0xD0 (_LABEL_26D4_145)
so there's a bit more work to do, but $26D7 is definitely the bit that translates from C300 to real data in C700 that then gets
synced to screen by $1F7